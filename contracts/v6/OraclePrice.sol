// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.6.12;

import "./interface/KeeperCompatibleInterface.sol";
import "./interface/OmsPolicy.sol";
import "./interface/EACAggregatorProxy.sol";
import "./library/SafeMath.sol";
import "./common/Ownable.sol";

contract OraclePrice is Ownable, KeeperCompatibleInterface {
    using SafeMath for uint256;
    
    address[] public aggregatorContracts;
    address public policyContract;
    uint256 public deviationThreshold;
    uint public immutable interval;
    uint public lastTimeStamp;
    uint public counter;
    
    constructor(address[] memory _oracles, address _policyContract, uint256 _deviationThreshold, uint _updateInterval) public {
        aggregatorContracts = _oracles;
        policyContract = _policyContract;
        deviationThreshold = _deviationThreshold;
        
        interval = _updateInterval;
        lastTimeStamp = block.timestamp;
        counter = 0;
    }
    
    function getEuroPriceInUsd(address _oracle) public view returns (int256) {
        int256 latestPrice = EACAggregatorProxy(_oracle).latestAnswer();
        return latestPrice;
    }
    
    function getGBPPriceInUsd(address _oracle) public view returns (int256) {
        int256 latestPrice = EACAggregatorProxy(_oracle).latestAnswer();
        return latestPrice;
    }
    
    function getYENPriceInUsd(address _oracle) public view returns (int256) {
        int256 latestPrice = EACAggregatorProxy(_oracle).latestAnswer();
        return latestPrice;
    }
    
    function getYUANPriceInUsd(address _oracle) public view returns (int256) {
        int256 latestPrice = EACAggregatorProxy(_oracle).latestAnswer();
        return latestPrice;
    }
    
    function getAveragePrice() public view returns (uint256) {
        uint256 length = aggregatorContracts.length;
        uint256 sumPrice = 0;
        for(uint256 i=0; i<length; i++) {
            int256 latestPrice = EACAggregatorProxy(aggregatorContracts[i]).latestAnswer();
            uint8 decimals = EACAggregatorProxy(aggregatorContracts[i]).decimals();
            uint256 restDec = SafeMath.sub(18, uint256(decimals));
            latestPrice = int256(SafeMath.mul(uint256(latestPrice), 10**restDec));
            sumPrice = SafeMath.add(sumPrice, uint256(latestPrice));
        }
        return SafeMath.div(sumPrice, length);
    }
    
    function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;

        // We don't use the checkData in this example
        // checkData was defined when the Upkeep was registered
        performData = checkData;
    }

    function performUpkeep(bytes calldata performData) external override onlyWhitelistAdmin {
        bool upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        require(upkeepNeeded == true, "Can Not call this method at this time");

        lastTimeStamp = block.timestamp;
        counter = counter + 1;

        // We don't use the performData in this example
        // performData is generated by the Keeper's call to your `checkUpkeep` function
        performData;
        updateTargetPrice();
    }
    
    function updateTargetPrice() internal {
        uint256 length = aggregatorContracts.length;
        uint256 sumPrice = 0;
        for(uint256 i=0; i<length; i++) {
            int256 latestPrice = EACAggregatorProxy(aggregatorContracts[i]).latestAnswer();
            uint8 decimals = EACAggregatorProxy(aggregatorContracts[i]).decimals();
            uint256 restDec = SafeMath.sub(18, uint256(decimals));
            latestPrice = int256(SafeMath.mul(uint256(latestPrice), 10**restDec));
            sumPrice = SafeMath.add(sumPrice, uint256(latestPrice));
        }
        uint256 targetRate = OmsPolicy(policyContract).targetPrice();
        uint256 rate = SafeMath.div(sumPrice, length);
        bool status = withinDeviationThreshold(rate, targetRate);
        
        if(status) {
            OmsPolicy(policyContract).setTargetPrice(rate);
        }
    }
    
    function withinDeviationThreshold(uint256 rate, uint256 targetRate) private view returns (bool) {
        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold).div(10**18);

        return
            (rate >= targetRate &&
                rate.sub(targetRate) < absoluteDeviationThreshold) ||
            (rate < targetRate &&
                targetRate.sub(rate) < absoluteDeviationThreshold);
    }
    
    function updateOracles(uint256 _pid, address _oracle) public onlyOwner {
        require(aggregatorContracts.length >= _pid, "No Oracle Found");
        aggregatorContracts[_pid] = _oracle;
    }
    
    function updatePolicy(address _policy) public onlyOwner {
        policyContract = _policy;
    }
    
    function setDeviationThreshold(uint256 deviationThreshold_) external onlyOwner {
        deviationThreshold = deviationThreshold_;
    }
}